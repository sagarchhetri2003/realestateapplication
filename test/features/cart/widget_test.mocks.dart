// Mocks generated by Mockito 5.4.5 from annotations
// in food_hub/test/features/cart/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/material.dart' as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:food_hub/features/cart/domain/usecases/add_cart.dart' as _i3;
import 'package:food_hub/features/cart/domain/usecases/fetch_cart.dart' as _i2;
import 'package:food_hub/features/cart/domain/usecases/update_cart.dart' as _i4;
import 'package:food_hub/features/cart/presentation/view_model/cart_cubit.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFetchCart_0 extends _i1.SmartFake implements _i2.FetchCart {
  _FakeFetchCart_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddCart_1 extends _i1.SmartFake implements _i3.AddCart {
  _FakeAddCart_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateCart_2 extends _i1.SmartFake implements _i4.UpdateCart {
  _FakeUpdateCart_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCartState_3 extends _i1.SmartFake implements _i5.CartState {
  _FakeCartState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CartCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartCubit extends _i1.Mock implements _i5.CartCubit {
  MockCartCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FetchCart get fetchCart => (super.noSuchMethod(
        Invocation.getter(#fetchCart),
        returnValue: _FakeFetchCart_0(
          this,
          Invocation.getter(#fetchCart),
        ),
      ) as _i2.FetchCart);

  @override
  _i3.AddCart get addCart => (super.noSuchMethod(
        Invocation.getter(#addCart),
        returnValue: _FakeAddCart_1(
          this,
          Invocation.getter(#addCart),
        ),
      ) as _i3.AddCart);

  @override
  _i4.UpdateCart get updateCart => (super.noSuchMethod(
        Invocation.getter(#updateCart),
        returnValue: _FakeUpdateCart_2(
          this,
          Invocation.getter(#updateCart),
        ),
      ) as _i4.UpdateCart);

  @override
  _i5.CartState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCartState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.CartState);

  @override
  _i6.Stream<_i5.CartState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i5.CartState>.empty(),
      ) as _i6.Stream<_i5.CartState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> getCart() => (super.noSuchMethod(
        Invocation.method(
          #getCart,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addNewCart(String? cartId) => (super.noSuchMethod(
        Invocation.method(
          #addNewCart,
          [cartId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addToCart(String? cartId) => (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [cartId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeFromCart(String? cartId) => (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [cartId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeAll(
    _i7.BuildContext? context,
    String? cartId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [
            context,
            cartId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void emit(_i5.CartState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i8.Change<_i5.CartState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
